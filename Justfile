
export current_fedora := env("CURRENT_FEDORA", "41")
export fedora_registry := env("FEDORA_REGISTRY", "registry.fedoraproject.org")
export fedora_image := env("FEDORA_IMAGE", "fedora-minimal")

build $CONTAINERFILE $TAG:
  #!/usr/bin/bash

  set -x

  # This command is meant to be run from CI, so *theoretically* speaking
  # there is no need to get the Containerfile full path, as it is already
  # generated by the matrix
  image_name=$(basename ${CONTAINERFILE})
  image_name="${image_name%.*}"

  podman build . \
    -f ${CONTAINERFILE} \
    --build-arg FEDORA_REGISTRY=${fedora_registry} \
    --build-arg FEDORA_IMAGE=${fedora_image} \
    --build-arg FEDORA_VERSION=${TAG} \
    -t ${image_name}:${TAG} \


tag $CONTAINERFILE $TAG $REGISTRY:
  #!/usr/bin/bash
  set -x
  image_name=$(basename ${CONTAINERFILE})
  image_name="${image_name%.*}"

  if [[ ${TAG} -eq ${current_fedora} ]]; then
    podman tag localhost/${image_name}:${TAG} ${REGISTRY}/${image_name}:${TAG} ${REGISTRY}/${image_name}:latest
  else
    podman tag localhost/${image_name}:${TAG} ${REGISTRY}/${image_name}:${TAG}
  fi

push $CONTAINERFILE $TAG $REGISTRY:
  #!/usr/bin/bash
  set -x
  image_name=$(basename ${CONTAINERFILE})
  image_name="${image_name%.*}"

  podman push ${REGISTRY}/${image_name}:${TAG}

  if [[ ${TAG} -eq ${current_fedora} ]]; then
    podman push ${REGISTRY}/${image_name}:latest
  fi
